function nirs = set_NI_nirs2

try
    [nirs Options] = loadcfgNIRS2;
catch 
    Options=[];
    Options.Bias=[0 0];
    Options.DeMod=[1 1];  %Default is for Nirs 4x4 config
end

daqreset;   % In Case of trouble reset engine.
NIRS2device.nBoards=0;
try 
    n=0;
    flag=0;
    try
        if isfield(Options,'Hardware') & isfield(Options.Hardware,'DAQ_ID')
            for boardIdx=1:length(Options.Hardware.DAQ_ID)
                Binit=Options.Hardware.DAQ_ID{boardIdx}.init;
                info = daqhwinfo(Binit);

                %Try to find this board
                for c=1:length(info.InstalledBoardIds);
                    if strcmp(Options.Hardware.DAQ_ID{boardIdx}.name,info.BoardNames{c}) & ...
                            strcmp(info.InstalledBoardIds{c},Options.Hardware.DAQ_ID{boardIdx}.slotid)
                        n=n+1;
                        boardID{boardIdx}=info.InstalledBoardIds{c};
                        boardInit{boardIdx}=Binit;
                    end
                end

            end

            %Make sure I got what I was looking for
            if n~=length(Options.Hardware.DAQ_ID)
                flag=0;
            else
                flag=1;
            end
        end
        auxflag=1;
        if isfield(Options,'Hardware') & isfield(Options.Hardware,'Aux_ID')
            auxflag=0;
            AuxInit=Options.Hardware.Aux_ID.init;
            info = daqhwinfo(AuxInit);

            %Try to find this board
            for c=1:length(info.InstalledBoardIds);
                if(strcmp(Options.Hardware.Aux_ID.name,info.BoardNames{c})) & ...
                            strcmp(info.InstalledBoardIds{c},Options.Hardware.Aux_ID.slotid)
                    AuxID=info.InstalledBoardIds{c};
                    auxflag=1;
                end
            end
        else
            auxflag=0;
            
        end

        if isfield(Options,'Hardware') & isfield(Options.Hardware,'DAQ_ID')

            %Make sure I got what I was looking for
            if n~=length(Options.Hardware.DAQ_ID)
                flag=0;
                Options.Hardware=rmfield(Options.Hardware,'DAQ_ID');
                if isfield(Options.Hardware,'Aux_ID')
                    Options.Hardware=rmfield(Options.Hardware,'Aux_ID');
                end
            else
                flag=1;
            end
        else
            flag=0;
        end
    catch
         disp('Loading of DAQ boards from config file failed');
         flag=0;
         auxflag=0;
         try
            Options.Hardware=rmfield(Options.Hardware,'DAQ_ID');
            Options.Hardware=rmfield(Options.Hardware,'Aux_ID');
         end
    end
    
    if ~flag %doing this with a flag- lets this be the default if the above fails 
        %Do as defualt
        info = daqhwinfo('mcc');
        n=0;
        for c=1:length(info.InstalledBoardIds);
            if(strcmp('PC-CARD-DAS16/16',info.BoardNames{c}))
                n=n+1;
                boardID{n}=info.InstalledBoardIds{c};
                boardInit{n}='mcc';
                 Options.Hardware.DAQ_ID{n}.name='PC-CARD-DAS16/16';
            elseif strcmp('PCM-DAS16D/16',info.BoardNames{c})
                n=n+1;
                boardID{n}=info.InstalledBoardIds{c};
                boardInit{n}='mcc';
                Options.Hardware.DAQ_ID{n}.name='PCM-DAS16D/16';
            elseif strcmp('PMD-1608FS',info.BoardNames{c})
                n=n+1;
                boardID{n}=info.InstalledBoardIds{c};
                boardInit{n}='mcc';
                Options.Hardware.DAQ_ID{n}.name='PMD-1608FS';
            end;

        end;
    end
    nirs.nBoards=n;
    
    if n>2
        auxflag=1;
        AuxID=boardID{3};
        AuxInit=boardInit{3};
        Options.Hardware.Aux_ID.name=Options.Hardware.DAQ_ID{3}.name;
    end
catch
    h=guihandles(gcf);
    set(h.OptionsStore,'userdata',Options);
    
    warndlg('DAQ cards could not be initialized');
    return
end
    if(~nirs.nBoards)
        warndlg('Error with Daq card- aborting...');
    return;
end;
%%
% Setup AD ==========================================================================
nirs.ai1=analoginput(boardInit{1},boardID{1});          % looking for card #0
addchannel(nirs.ai1,[0:7]);

set(nirs.ai1.Channel,'InputRange',[-5.00, 5.00]);
set(nirs.ai1.Channel,'SensorRange',[-5.00 5.00]);
set(nirs.ai1.Channel,'UnitsRange',[-5.00 5.00]);


set(nirs.ai1, 'TimerFcn',[]); 

set(nirs.ai1, 'TriggerType','immediate');       %set(nirs.ai1, 'TriggerType','Manual');
set(nirs.ai1, 'TriggerRepeat',0);
set(nirs.ai1,'ClockSource','External');

 set(nirs.ai1,'BufferingMode','Auto')

%set(nirs.ai1, 'StopFcn',{'Nirs_BackEnd','StopAction_Callback'}); 
set(nirs.ai1,'Tag','AD1');

% Setup Digital IO ==================================================================
nirs.dio1 = digitalio(boardInit{1},boardID{1});
addline(nirs.dio1,[0:7],'Out');
set(nirs.dio1,'Tag','DIO1');
nirs.dio1.Line.LineName(1)='Data';
nirs.dio1.Line.LineName(2)='Gain Clock';
nirs.dio1.Line.LineName(3)='Gain Latch';
nirs.dio1.Line.LineName(4)='AB Select';
nirs.dio1.Line.LineName(5)='Laser Clock';
nirs.dio1.Line.LineName(6)='Laser Latch';
nirs.dio1.Line.LineName(7)='20Hz Select';
nirs.dio1.Line.LineName(8)='AD Start';
putvalue(nirs.dio1.line(7),[1]);                    % 20Hz Select


% Dummy Buffer to prevent drawnow from stepping on anything else....
nirs.dummy = zeros(10,10);

if(nirs.nBoards >= 2)
    try
        nirs.ai2=analoginput(boardInit{2},boardID{2});
        addchannel(nirs.ai2,[0:7]);
        set(nirs.ai2.Channel,'InputRange',[-5 5]);
        set(nirs.ai2.Channel,'SensorRange',[-5 5]);
        set(nirs.ai2.Channel,'UnitsRange',[-5 5]);

        set(nirs.ai2, 'TimerFcn',[]);
        set(nirs.ai2, 'StopFcn',[]);

        set(nirs.ai2, 'TriggerType','immediate');
        set(nirs.ai2, 'TriggerRepeat',0);
        set(nirs.ai2, 'ClockSource','External');


        %set(nirs.ai2, 'ChannelSkewMode','Equisample');
        set(nirs.ai2,'Tag','AD2');

        % Setup Digital IO
        nirs.dio2 = digitalio(boardInit{2},boardID{2});
        addline(nirs.dio2,[0:7],'Out');
        set(nirs.dio2,'Tag','DIO2');
        nirs.dio2.Line.LineName(1)='Data';
        nirs.dio2.Line.LineName(2)='Gain Clock';
        nirs.dio2.Line.LineName(3)='Gain Latch';
        nirs.dio2.Line.LineName(4)='AB Select';
        nirs.dio2.Line.LineName(5)='Laser Clock';
        nirs.dio2.Line.LineName(6)='Laser Latch';
        nirs.dio2.Line.LineName(7)='20Hz Select';
        nirs.dio2.Line.LineName(8)='AD Start';
        putvalue(nirs.dio2.line(7),[1]);                    % 20Hz Select
    catch
        nirs.nBoards=1;
    end
end;

%Initialize the aux card:
if(auxflag)
    try
    nirs.auxDAQ=analoginput(AuxInit,AuxID);
    addchannel(nirs.auxDAQ,[0:7]);
    set(nirs.auxDAQ.Channel,'InputRange',[-5 5]);
    set(nirs.auxDAQ.Channel,'SensorRange',[-5 5]);
    set(nirs.auxDAQ.Channel,'UnitsRange',[-5 5]);

    set(nirs.auxDAQ, 'TimerFcn',[]);
    set(nirs.auxDAQ, 'StopFcn',[]);

    set(nirs.auxDAQ, 'TriggerType','immediate');
    set(nirs.auxDAQ, 'TriggerRepeat',0);
    set(nirs.auxDAQ, 'ClockSource','internal');

    %set(nirs.auxDAQ, 'ChannelSkewMode','Equisample');
    set(nirs.auxDAQ,'Tag','AuxDAQ');
    setBufferForPMD(nirs.auxDAQ);
    catch
        nirs.nBoards=nirs.nBoards-1;
    end
end

%% SAMPLE RATE

if(~nirs.nBoards)
    tdisp('local_SetSampleRate not implemented yet.');
    return;
end;
rate=setverify(nirs.ai1,'SampleRate',3205/8);          %200Hz * 2 (+/- voltages) %nirs.SampleRate*2);
if(nirs.nBoards>1)
    rate=setverify(nirs.ai2,'SampleRate',3205/8);      %200Hz * 2 (+/- voltages) nirs.SampleRate*2);
end;

if isfield(nirs,'auxDAQ')
    set(nirs.auxDAQ,'SampleRate',3205/16);
end
nirs.SampleRate=rate;

%% local_SetSamplesPerTrigger(nirs);
if(~nirs.nBoards)
    tdisp('local_SetSampleRate not implemented yet.');
    return;
 end;
 
 itmp = fix(nirs.SampleRate*nirs.TestTime);
 imod = mod(itmp,2);
 itmp = itmp + imod;
 itmp=ceil(itmp/31)*31;
 set(nirs.ai1,'SamplesPerTrigger',itmp);
 if(nirs.nBoards>1)
     set(nirs.ai2,'SamplesPerTrigger',itmp);
 end;
% 

if isfield(nirs,'auxDAQ')
    itmp = fix(nirs.SampleRate*nirs.TestTime/2);
    aiinfo = daqhwinfo(nirs.auxDAQ);
    itmp=ceil(itmp/31)*31;
    set(nirs.auxDAQ,'SamplesPerTrigger',itmp);

end
